"""
This script parses a JSON report generated by `osv-scanner`, extracts relevant
vulnerability information (package, version, CVE, CVSS, EPSS), and exports the
results into a CSV file.

Usage: python3 osv-parser.py /path/to/osv-report.json
Output: parsed-vulnerabilities.csv with: package, version, cve, cvss, epss
"""
import json
import sys
import requests
import csv

class OSVParser(object):

    def parse_json_vulnerabilities(self, result_path):
        with open(result_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        vulnerabilities = []
        for result in data.get('results', []):
            for package in result.get('packages', []):
                for vulnerability in package.get('vulnerabilities', []):
                    try:
                        cve = self.get_cve(vulnerability)
                        parsed_vuln = {
                            'package': package.get('package', {}).get('name'),
                            'version': package.get('package', {}).get('version'),
                            'cve': cve,
                            'cvss': self.get_cvss(vulnerability.get('id'), package.get('groups', [])),
                            'epss': self.get_epss(cve)
                        }
                        vulnerabilities.append(parsed_vuln)
                    except Exception as e:
                        print(e)
        self.dict_to_csv(vulnerabilities)

    @staticmethod
    def get_cve(vulnerability):
        for cve in vulnerability.get('aliases', []):
            if cve.startswith("CVE"):
                return cve
        return None

    @staticmethod
    def get_cvss(vulnerability_id, severity_groups):
        for group in severity_groups:
            for id in group.get('ids', []):
                if vulnerability_id == id:
                    if not group.get('max_severity'): return 0
                    return float(group.get('max_severity'))
        return None

    @staticmethod
    def get_epss(cve):
        if not cve:
            return None
        url = f"https://api.first.org/data/v1/epss?cve={cve}"
        try:
            resp = requests.get(url, timeout=10)
            resp.raise_for_status()
            data = resp.json()
            if data.get("data"):
                epss_score = data["data"][0].get("epss")
                return epss_score
        except Exception as e:
            return None

    @staticmethod
    def dict_to_csv(vulnerabilities_dict):
        if not vulnerabilities_dict:
            print("No vulnerabilities found. CSV not created.")
            return
        with open("parsed-vulnerabilities.csv", "w", newline="") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=vulnerabilities_dict[0].keys())
            writer.writeheader()
            writer.writerows(vulnerabilities_dict)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 osv-parser.py /path/to/osv-report.json")
        sys.exit(1)
    print("Running OSV Parser...")
    OSVParser().parse_json_vulnerabilities(sys.argv[1])
